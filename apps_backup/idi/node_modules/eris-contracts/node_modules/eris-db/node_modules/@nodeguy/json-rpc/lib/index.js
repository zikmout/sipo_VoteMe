'use strict'

const I = require('iteray')
const R = require('ramda')

const pullResponse = (pendingRequests, values) =>
  setImmediate(() => {
    values.next().then(({value: {error, id, result}}) => {
      const pending = pendingRequests[id]

      if (error) {
        pending.reject(Object.assign(new Error(), pending.request, error))
      } else {
        pending.resolve(result)
      }

      delete pendingRequests[id]
      pullResponse(pendingRequests, values)
    })
  })

const client = (transport) => {
  const pendingRequests = {}
  let nextId = 1
  const requests = I.AsyncQueue()

  const getMethod = (target, name) =>
    function () {
      return new Promise((resolve, reject) => {
        const request = {
          method: name,
          params: Array.from(arguments)
        }

        pendingRequests[nextId] = {request, resolve, reject}

        requests.push(Promise.resolve({
          done: false,
          value: R.merge(request, {
            jsonrpc: '2.0',
            id: nextId
          })
        }))

        nextId++
      })
    }

  const responses = I.splitPromises(transport(requests))
  const values = I.to('Iterator', responses.values)
  pullResponse(pendingRequests, values)

  return {
    methods: new Proxy({}, {get: getMethod}),
    errors: responses.reasons
  }
}

module.exports = {
  client
}
