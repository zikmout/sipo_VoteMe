'use strict'

const assert = require('assert')
const I = require('../lib')

describe('operations on Array', function () {
  const fruits = ['Banana', 'Orange', 'Lemon', 'Apple', 'Mango']

  it('slices fruits', function () {
    const citrus = I.slice(1, 3, fruits)
    assert.deepEqual(citrus, ['Orange', 'Lemon'])
  })

  it('is curried', function () {
    const citrus = I.slice(1)(3)(fruits)
    assert.deepEqual(citrus, ['Orange', 'Lemon'])
  })
})

describe('operations on arguments', function () {
  it('slices fruits', function () {
    function slicer () {
      return I.slice(1, 3, arguments)
    }

    const citrus = slicer('Banana', 'Orange', 'Lemon', 'Apple', 'Mango')
    assert.deepEqual(citrus, ['Orange', 'Lemon'])
  })
})

describe('Iterable', function () {
  const iterable = I.to('Iterable', [1, 2, 3, 4, 5])

  it('accepts positive values', function () {
    assert.deepEqual(I.to(Array, I.slice(1, 3, iterable)), [2, 3])
  })

  it("doesn't accept negative values", function () {
    assert.throws(() => {
      I.slice(-2, Infinity, iterable)
    }, /No method matches 3 arguments in call to generic function 'slice'./)
  })
})

it('operates on asyncIterables', function () {
  const fruits = ['Banana', 'Orange', 'Lemon', 'Apple', 'Mango']

  const nextFruit = () => {
    const fruit = fruits.shift()

    return Promise.resolve(fruit
      ? {done: false, value: fruit}
      : {done: true}
    )
  }

  const asyncIterable = {
    [Symbol.asyncIterator]: () => ({
      next: nextFruit
    })
  }

  const citrus = I.slice(1, 3, asyncIterable)
  const citrusIterator = citrus[Symbol.asyncIterator]()

  Promise.all([
    citrusIterator.next(),
    citrusIterator.next(),
    citrusIterator.next()
  ]).then((results) => {
    assert.deepEqual(results, [
      {done: false, value: 'Orange'},
      {done: false, value: 'Lemon'},
      {done: true}
    ])
  })
})
